i can honestly say that i dont understand what your code is trying to do . when coding js, make NO attempt to have javascript interact with PHP directly . remember that javascript will see the ECHO of the php, but javascript cannot directly access PHP in any manner, and vice versa . the echo that javascript sees is irrelevant to javascript; information could have been generated by ASP, SSI, coldfusion, JSP, whatever . javascript doesnt directly access any of that stuff, and so you shouldn't code as if it did . I am using the ajaxRequest() function to get ajax going and to send my variables to $_GET . So, my question is: I am sending the variable to the wrong place? If not, am I accessing it incorrectly?Thank you for any help . I am new with using ajax . I am trying to basically make a "Folder Tree" that I can expand and collapse folders . Because I'd rather not have page refreshes, and because I'd like to learn ajax a little better, I've done it this way . I have javascript functions in a php file that is linked as if it were a javascript-only file . See below . Hence if, as seems natural, we select the largest S value as representing the ‘best’ local alignment between the two strings, we obtain the match consisting of the entire two strings, with a score of 9 . However, if instead we choose two separate local alignments consisting of the match between X 1 . . .9) and Y(1 . . . 10), with a score of 8, and the match between X(16. . .23) and Y(18. . .24) with a score of 6, we obtain an overall score of 14 — see the two local alignments displayed in Figure 4 . We would argue that this score more accurately reflects the similarities between the two strings, and that the original score of 9 substantially underestimates the cumulative significant local matches. Clearly,
more extreme examples of this phenomenon are possible . The worst-case time complexity of an algorithm that computes all of the entries in the S table cannot be better than O(mn) . However, in practical cases, we can expect a large proportion of the entries in the S table to be zero, and we can exploit this sparsity to significantly speed up the algorithm in most cases . Such speed-up would not be expected in the traditional domain of the SmithWaterman algorithm because of the small alphabet sizes in molecular biology (4 in the case of DNA and around 20 in the case of protein sequences) . But for sequences derived from plain English text, we can expect an alphabet size of several thousand and a relatively small number of pairwise matches between tokens in the two sequences . Here is an example that very clearly illustrates how the Smith-Waterman algorithm can be adapted to deal effectively with the detection of collusion . Here is an interesting example that very clearly illustrates how we can adapt the algorithm of Smith-Waterman to deal with the detection of collusion .
