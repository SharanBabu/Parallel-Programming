i can honestly say that i dont understand what your code is trying to do . however, the one piece of advice i can offer is this: the PHP runs before the HTML/javascript . when coding js, make NO attempt to have javascript interact with PHP directly . remember that javascript will see the ECHO of the php, but javascript cannot directly access PHP in any manner, and vice versa . they simply don't talk in any direct way . the echo that javascript sees is irrelevant to javascript; that information could have been generated by ASP, SSI, coldfusion, JSP, whatever . I am using the ajaxRequest() function to get ajax going and to send my variables to $_GET . However, when I use $_GET['parent'] in the expandFolder() function, the result is empty - there is no value . I am trying to basically make a "Folder Tree" that I can expand and collapse folders . Also, the contents in each folder is dynamic so I am receiving these things from a database . Because I'd rather not have page refreshes, and because I'd like to learn ajax a little better, I've done it this way . I have javascript file that is linked as if it were a javascript-only file . See below . This is for the sake of last sentence . we obtain the match consisting of the entire two strings, with a score of 9 . However, if instead we choose two separate local alignments consisting of the match between X 1 . . . 9) and Y(1 . . . 0), with a score of 8, and the match between X(16 . . .23) and Y(18 . . . 24) with a score of 6, we obtain an overall score of 14 â€” see the two local alignments displayed in Figure 4 . We would argue that this score more accurately reflects the similarities between the two strings, and that the original score of 9 substantially underestimates the cumulative significant local matches. Clearly, more extreme examples of this phenomenon are possible . The worst-case time complexity of an algorithm that computes all of the entries in the S table cannot be better than O(mn) . However, in practical cases, we can expect a large proportion of the entries in the S table to be zero, and we can exploit this sparsity to significantly speed up the algorithm in most cases . Such speed-up would not be expected in the traditional .
